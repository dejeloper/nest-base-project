// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String
  password        String
  isActive        Boolean          @default(true)
  roleId          Int
  role            Role             @relation(fields: [roleId], references: [id])
  userPermissions UserPermission[]
  sessions        Session[]
  schedules       UserSchedule[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("user")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  users           User[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("role")
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("permission")
}

model RolePermission {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@id([roleId, permissionId])
  @@map("role_permission")
}

model UserPermission {
  userId       Int
  permissionId Int

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@id([userId, permissionId])
  @@map("user_permission")
}

model Session {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  startTime DateTime  @default(now())
  endTime   DateTime?
  ipAddress String?
  device    String?

  @@map("session")
}

model UserSchedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_schedule")
}

model Parameter {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("parameter")
}

model Payment {
  id         String   @id @default(uuid())
  amount     Float
  customerId String   @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("payment")
}
